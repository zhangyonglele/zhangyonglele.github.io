<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YLZhang&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-05-15T11:32:27.127Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HappyLife</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>献给生活</title>
    <link href="http://yoursite.com/2021/05/11/2021-5-14-dairy/"/>
    <id>http://yoursite.com/2021/05/11/2021-5-14-dairy/</id>
    <published>2021-05-11T01:50:36.000Z</published>
    <updated>2021-05-15T11:32:27.127Z</updated>
    
    <content type="html"><![CDATA[<p>&#8195;随着最后一片春天的落花，大学四年走向了末尾。</p><blockquote><p>打开一首Some Nights把<br><a id="more"></a></p></blockquote><h4><span id="平凡与苦闷的故事">平凡与苦闷的故事</span></h4><p>&#8195;果不其然，大学真的没有什么值得我骄傲的事，我记不得什么时候我去美好的地方旅行，我也记不得到底在什么时候我选择走上了今天这条路。回过神来，匆匆四年已经逝去。没有伟大的成就，没有让人惊叹的经历，没有兴奋的冒险，没有美好的爱情，没有做到极致的事。朋友寥寥几人，挚友屈指可数，茫茫二万人中都是匆匆擦身，到了结束之时也只能叹息时间如此之长，却不能早些相识。太多的遗憾因我的蹉跎诞生，只能在看不到的地方写下“莫待无花空折枝”。</p><p>&#8195;大学一年级，迷茫无助，黑暗中探寻；大学二年级，忘记自我，放肆玩耍，失去机会；大学三年级，重拾自我，奋斗太迟；大学四年级，时常焦虑，错过一切，空留遗憾。四年用短短一句话就结束了，真是有些可笑，还记得那些宏图伟志，还记得那些豪言壮语，还记得那些对自己的承诺，都在自己的平庸里化为了尘埃。论文写到致谢的时候才发现，自己的人生竟如此简单。想要的波澜壮阔，想要的惊天动地，看到最后发现都是放屁。苦笑几声，看看镜子里一天比一天少的头发，看着自己一天比一天重的黑眼圈，平凡的人，终究还是会被世界和时间碾平了一切。</p><p><img src="/img/dairy01.jpg" alt></p><p>&#8195;宿舍八人，仅有我一人选择走向社会，真是可笑，我为什么会相信自己可以在社会上站住，北京，一个不是我归属的地方，一个我去了会把自己的灵魂献祭的地方，最后还是义无反顾的冲了过去。一人在陌生之地漂泊，无所依靠，无所适从，除了工作，其余都是被外界拘束。付出的代价远远比想象的要沉重，我选的路是不是正确的，我选择的未来是不是正确的，我选择人是不是正确的，无从知晓。人生在这种不可知中度过了22年，我做的最多的事情就是怀疑自己，做下的决定没有一个是不后悔。除我以外的人嘲笑我，我也嘲笑我，笑自己曾经的自大，笑自己曾经的理想，笑自己打破束缚的尝试。期待着幸运的光临，期待着勇气的光临，期待着好事的光临。全都因为平庸错失，看着光芒从手中逝去，化成流沙，空留虚无。</p><p>&#8195;于其反复思考，不如直接埋葬，想明白了，就是放弃自我，随波逐流，成为一个出卖灵魂的人。与其说自己成为行尸走肉，不如成为别人手里的工具，螺丝，材料。</p><h4><span id="生活啊生活">生活啊，生活</span></h4><p>&#8195;生活到底是是什么，是柴米油盐，是衣食住行，是辛苦工作寻求更好的收入，是肆意的去想去的地方旅行，是实现自己的人生价值，是去和天边的星辰共舞，还是去幽静的河水旁和所爱之人共饮一壶茶水？</p><p>&#8195;可能都不是吧，1/5的生命告诉我生活大部分都是苦难，平淡和快乐只是一小部分。充斥被世界排斥，被繁杂的事折磨，数不清的不如意和后悔都是我生活的写照。从未见过有人如我一般对自己做过的事反复后悔，做出的选择反复横跳。</p><blockquote><p>Some nights I stay Up cashiNg in mY bad lUck.</p><p>Some Nights I call it a draw.</p></blockquote><p>&#8195;我现在还记得我每一个后悔的决定，曾经都是如此的坚决，如此的固执，如此的油盐不进。我的一生可以说是真的嘴硬的和铜墙铁壁一样。看上去的温和背后是叛逆，不守规矩的灵魂。可是它没给我带来什么放荡不羁的性格，带给我只是杠，倔，臭脾气。</p><blockquote><p>Some Nights I wish that My Lips could Build a Castle.</p><p>Some Nights I wish They’d Just Fall Off.</p></blockquote><p>&#8195;还记得那个刚来到大学的青年，心中不是踌躇满志，心中藏着遗憾，藏着不服气，藏着淡淡的怨气。他不满当时的遭遇，他不相信自己仅仅只能做到此处，他告诉自己天道酬勤，告诉自己努力一定可以换来一切。当然，他年轻了；但是，幸运女神的偶然眷顾让他以为自己真的是得到了努力的回报，或许吧，这或许是他前1/5人生少有的抓住了机会的时刻。</p><blockquote><p>But I still weak up I still see you ghost.</p><p>Oh Lord I’m still not sure what I stand for.</p></blockquote><p>&#8195;脱发，无穷无尽的肥肉，心理压力进一步压迫；工作、考研的选择让我痛苦不堪。我看到了过去的我付出的代价，那个一旦放松，生活就会让你付出的代价。我找人诉说，却没有人能给我再次指明道路；我自己探寻，只是在泥潭里越陷越深。没有选择继续深造，选择了去生活，去走向社会。迎着困难上去，我头铁，还有那背后叛逆的灵魂得到了短暂的释放。</p><p>&#8195;走在上班的路上，看着上班下班的车来车往，有一种苍凉感。每天从园区走出，等着打卡的最后一分钟，拿着加班的夜宵。抬头天已经盖上了黑纱，回到出租房，吃着炸鸡，伴着炎热的气温，不舍得打开商电价格的空调，看着武林外传，留着眼泪。</p><p>&#8195;但是社会不需要眼泪，第二天的生活日复一日，上班，早餐，工作，炸鸡，睡觉。这就是生活。这就是无趣的生活和无趣的我。</p><h4><span id="未来在哪里">未来在哪里</span></h4><p>&#8195;我的未来不属于北京，但我仅仅知道不在北京。我一直是一个愿意做长期计划的人，但是当我真的去面对一个还有60年的不知道在何方的未来，真正的无所适从感出现在心头，我不知道家在哪里了，那个出租屋不是我的家，睡觉的地方，从来不能给我带来归属。</p><p>&#8195;我想要的未来是一个能让我成为我自己的的未来，即使我还没有想明白。我想让我的思绪能在星辰之间飞行，想让双脚在大地上跳跃，想让双手抚过四季不同的晨风，想让相机定格每一个值得回忆的瞬间。或许真的有一天，生活能给我生命的实感，能给我带来小时的简单纯粹的快乐，在野地里奔跑，在苍穹之下把风筝放到比天高，比太阳高的地方。</p><p>&#8195;曾经有个梦，即使是一个梦。捧着流星，许下愿望，在彩虹的尽头，我也能和过去一样咸鱼的躺在草坪上，看着星球流转，渐入梦乡。或许只是躺在舒服的床上，看着不动脑子的动漫，和曾经一样傻笑。</p><p>&#8195;未来啊，未来或许不只是梦吧，希望未来是一个能看到，也有可能摸到的未来吧。</p><h4><span id="或许总有一天总有一天">或许总有一天，总有一天</span></h4><p>&#8195;其实很久之前的愿望是能御风而行，从低谷穿越到山巅，当时曾经是物理意义上的，现在从心灵层面已经经历过了（狗头。</p><p>&#8195;每次翻看Ticket book都有一种，“我还去过那么多地方”的感叹，一线城市一直到二十八线小村子，看过不同的风土，看过不一样的烟火气。每次看到我的字，都觉得不能承载我细腻的思绪，可能以用我的手写出来，纸就自尽而亡了。也想过怎么样用文字来描述跨越山河的足迹，但华丽的辞藻写不出人间的烟土，简单的文字也描述不了万世美景。只能用一张一张的机票，车票来承载这一段一段的回忆和精力。</p><p>&#8195;从边疆城市，到国际都市，到苏杭之景，再到世界四大古都之一。我的步子也是走遍了大江南北，穿越山河。我爱那种在人间穿梭的感觉，看着烟火飘摇直上，看着太阳东升西落。繁华的都市最平凡的角落，边缘世界最繁华的中心。宏伟的冒险史诗从来不属于我，但我喜爱那种史诗的苍凉和传颂感，梦想着也能成为故事中的一个小角色。</p><p>&#8195;或许有一天，总有一天，我能一人、或与友人，或爱人、或知己、或亲人、或路人、或动物伙伴，御风飞行，穿越高耸入云的山巅，深不见底的河谷，来一场罗小黑式的公路旅行。饮泉水，食野植，游于水流之上，行于星辰之间。</p><blockquote><p>Five minutes in and I’m bored again</p><p>Ten years of this I’m not sure if anybody understands</p></blockquote><blockquote><p>Who the fuck wants to die alone all dried up inthe desert sun</p></blockquote><blockquote><p>Its’s for the best you didn’t linsten</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#8195;随着最后一片春天的落花，大学四年走向了末尾。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;打开一首Some Nights把&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Java中Cipher加密模块的使用方法分析</title>
    <link href="http://yoursite.com/2020/12/13/java-cipher/"/>
    <id>http://yoursite.com/2020/12/13/java-cipher/</id>
    <published>2020-12-13T13:35:50.000Z</published>
    <updated>2020-12-14T15:50:09.016Z</updated>
    
    <content type="html"><![CDATA[<p>有关于Java中加密算法的应用有很多，比如AES、md5，RSA等，大多数密码使用需要Cipher来进行辅助。</p><a id="more"></a><h3><span id="初始化cipher的参数内涵和基本原理">初始化Cipher的参数内涵和基本原理</span></h3><p>在使用Cihper对其进行初始化的时候，在调用以下方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cipher.getInstance(String transformation);</span><br></pre></td></tr></table></figure></p><p>对于其中字符串参数 <em>transformation</em> （即转换模式）进行分析，其作用实际上是两种。</p><p>查阅一下文档（基于JDK11）：</p><blockquote><p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/javax/crypto/Cipher.html" target="_blank" rel="noopener">sun基于JDK11的Cipher官方文档</a></p></blockquote><p>在描述中，我们可以发现对该参数的描述如下：</p><blockquote><p>A transformation is a string that describes the operation (or set of operations) to be performed on the given input, to produce some output. A transformation always includes the name of a cryptographic algorithm (e.g., AES), and may be followed by a feedback mode and padding scheme.</p><p>A transformation is of the form:</p><ul><li><p><em>“algorithm/mode/padding”</em> or</p></li><li><p><em>“algorithm”</em></p></li></ul><p>(in the latter case, provider-specific default values for the mode and padding scheme are used). For example, the following is a valid transformation:</p><pre><code>Cipher c = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);</code></pre></blockquote><p>在文章中看到该参数具有两种使用方法，一种是传统的直接将算法名称输入到Cipher初始化方法中，是最简单的，还有另一种是 <em>算法/工作模式/填充模式</em> 的较为完整的参数传递。</p><h4><span id="算法">算法</span></h4><p>算法就是我们常说的 AES, RSA等算法，不在此处详细描述。</p><h4><span id="工作模式">工作模式</span></h4><p>工作模式指的是在分组密码的实践中，将密码划分为长度为n的组。</p><h4><span id="填充模式">填充模式</span></h4><p>padding一般是指在原文长度当大于一个块的长度时，使用某种填充方式将空闲下来的长度（即不满一块的部分）使用某种规则填充</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关于Java中加密算法的应用有很多，比如AES、md5，RSA等，大多数密码使用需要Cipher来进行辅助。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java Cipher" scheme="http://yoursite.com/tags/Java-Cipher/"/>
    
  </entry>
  
  <entry>
    <title>Webflux初窥</title>
    <link href="http://yoursite.com/2020/10/27/webflux/"/>
    <id>http://yoursite.com/2020/10/27/webflux/</id>
    <published>2020-10-27T12:30:18.000Z</published>
    <updated>2021-05-15T10:40:26.515Z</updated>
    
    <content type="html"><![CDATA[<p>在初探Webflux之前，要先理解什么是Webflux技术。<br><a id="more"></a></p><h3><span id="servlet运行模式">Servlet运行模式</span></h3><p>在Webflux技术出现之前，服务器的响应模式是由Servlet+容器（如Tomcat）组成的，服务器响应模式是同步阻塞的。在Spring的框架下重新组建的servlet规范依旧是同步阻塞的模式，他们运行在在servlet容器中。</p><p>这种Servlet的运行模式是基于大型线程池+新建线程的模式。当请求进入后，为了防止线程阻塞，容器将会采用新建线程的方式来处理请求。</p><p>除去Servlet，与其一同使用的filter同样是同步阻塞的，包括用于处理的HttpServletReq和respon。</p><h3><span id="响应式的运行模式">响应式的运行模式</span></h3><p>Tomcat作为服务器运行模式一来较为重量级，而来每一个请求都会创建新的线程处理的方式对于超高并发大业务会对内存压力较重。除去这种可能出现的问题外，在微服务领域，分布式io可能会出现等待其他服务组件的情况。为了解决这个问题，首先要解决的就是同步阻塞。而对于响应式，则是对非阻塞模式的进一步诠释，当操作完成后，使用通知事件的方式。</p><p>响应式和异步常在前端和客户端中出现，对于客户端中的经典异步响应框架如Rxjava和retrofit组件连用。而在服务器领域，使用的更多的则是Reactor，本身Reactor又与JDK提供的NIO相关，本文就不过多赘述。在Flux中则采用的Reactor，当然Rxjava也是支持的。</p><p>在响应式模式中，提供了一个与CPU核心数相同的线程池来处理请求，由于处理请求的线程不存在阻塞的问题。结合Java1.8中提供的流式编程操作符，来支撑函数式编程的方面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在初探Webflux之前，要先理解什么是Webflux技术。&lt;br&gt;
    
    </summary>
    
    
      <category term="webflux" scheme="http://yoursite.com/tags/webflux/"/>
    
  </entry>
  
  <entry>
    <title>nginx轻量级Http服务器详解</title>
    <link href="http://yoursite.com/2020/09/02/nginx/"/>
    <id>http://yoursite.com/2020/09/02/nginx/</id>
    <published>2020-09-02T01:29:31.000Z</published>
    <updated>2020-10-01T16:13:03.289Z</updated>
    
    <content type="html"><![CDATA[<p>nginx作为平常项目中最常用的反向代理服务器，常用于部署我们的日常开发项目，作为一个路由转发，负载均衡，https配置，静态资源配置的功能。</p><a id="more"></a><h3><span id="反向代理">反向代理</span></h3><p>反向代理的实际工作原理是，代理服务器来接受客户端的网络连接访问请求，然后客户端根据策略，将请求转发给实际中工作的服务器，并让业务服务器处理结果，返回给客户端的过程。</p><p>反向代理服务器有许多优点：</p><ol><li>提高了内部服务器的安全<ul><li>对于外界来说，我们只对外暴露的代理服务器的IP和端口号，内部服务对外部网络完全不可见，而且，代理服务器中不保存信息资源，这样就提高了内部服务的安全性。</li></ul></li><li>加快了对内部服务器的访问速度。</li><li>节约了有限的IP资源，内部网络通过反向代理映射，减少了暴露在公网上的IP地址，解决了IP地址不足的问题。</li></ol><h3><span id="负载均衡">负载均衡</span></h3><p>说到反向代理，不得不提到负载均衡在nginx服务器上的应用。</p><p>负载均衡有一下几种常见的方式。</p><ol><li><p>轮询（默认），每个请求按照时间顺序逐一分配到不同的后端服务器，当后端服务器失效，则自动剔除该服务器。</p></li><li><p>权重方式，指定轮询几率，权重和访问比率成正比，用于后端服务器性能不均匀的情况。</p></li><li><p>ip_hash请求结果经过一次哈希，分配到一个固定的后端服务器。</p></li><li><p>backup模式，主服务器忙的或者失效的时候，请求backup服务器。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx作为平常项目中最常用的反向代理服务器，常用于部署我们的日常开发项目，作为一个路由转发，负载均衡，https配置，静态资源配置的功能。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>https机制详解</title>
    <link href="http://yoursite.com/2020/09/02/https/"/>
    <id>http://yoursite.com/2020/09/02/https/</id>
    <published>2020-09-02T01:29:14.000Z</published>
    <updated>2021-05-15T10:39:54.412Z</updated>
    
    <content type="html"><![CDATA[<p>在分析https之前，首先要把http搞清楚。<br><a id="more"></a><br>http本身基于tcp，实际上提供可靠传输的任何一种协议都可以作为http协议的底层传输。</p><h2><span id="http工作原理">Http工作原理</span></h2><p>对于Http协议的，采用了请求/响应模型，客户端向服务端发送一个请求报文，内涵报文的结构的多种数据。服务器收到后将数据响应，返回给客户端，响应报文内容包括协议版本号，成功/错误代码，服务器的部分信息和报文头和响应数据。</p><p>接下来简述http请求/响应的过程：</p><ol><li>客户端和服务器建立连接<ul><li>一个客户端，和Http端口建立一个TCP连接</li></ul></li><li>发送Http请求<ul><li>通过TCP套接字，客户端向服务端发送请求报文，请求报文由请求行、请求头、空行和请求数据组成。</li></ul></li><li>服务器接收响应并返回Http响应数据<ul><li>服务器解析请求，定位请求资源，服务器将响应数据副本写入TCP套接字。一个响应由状态行、响应头、空行和响应体数据组成</li></ul></li><li>释放TCP连接<ul><li>释放TCP连接由两种情况，一种建立的是长连接，建立的状态为KeepAlive，即建立长连接，则保留该连接一段时间，可以继续接受请求。如果连接模式为Close，即短连接，则在请求完成后服务器主动关闭TCP连接，客户端被动关闭连接。</li></ul></li><li>客户端解析响应内容</li></ol><p>看了这个部分，接下来对这个工作原理做一个扩展，将这部分扩展到在浏览器中输入一个域名，直到网站内容出现的过程。</p><h3><span id="网页加载过程分析">网页加载过程分析</span></h3><ol><li>浏览器收到域名后，首先在浏览器本地查找是否由其对应的IP映射，如果不存在，开始查找本机缓存 =&gt; host =&gt; DNS服务器，直到解析URL对应的IP地址。这部分做的是DNS解析的工作。</li><li>接下来解析完成后，与该IP地址建立TCP连接。</li><li>浏览器发送请求报文，作为TCP三次握手的第三个报文的数据发送给服务器。</li><li>服务器对请求做出响应，发送内容到客户端。</li><li>服务器主动释放TCP连接。</li><li>浏览器解析响应数据。</li></ol><h3><span id="http无状态">HTTP无状态</span></h3><p>http本身是无状态的，协议本身不保存之前请求或者响应报文的信息。为了实现状态保存的功能，引入了Cookie机制。</p><h3><span id="http无连接">HTTP无连接</span></h3><p>HTTP本身无连接，处理完请求就断开连接了。但是后续http协议的更新支持一段时间内保持连接，保证在短时间内不会反复建立TCP连接。</p><h3><span id="http方法">HTTP方法</span></h3><p>GET</p><p>HEAD</p><p>POST</p><p>PUT</p><p>DELETE</p><p>TRACE</p><p>OPTIONS</p><p>CONNECT</p><h3><span id="http状态码">HTTP状态码</span></h3><table><thead><tr><th></th><th>类别</th><th>发生原因</th></tr></thead><tbody><tr><td>1XX</td><td>信息性状态码</td><td>接受的请求正在处理</td></tr><tr><td>2XX</td><td>成功状态码</td><td>请求处理完成</td></tr><tr><td>3XX</td><td>重定向</td><td>需要附加操作完成请求</td></tr><tr><td>4XX</td><td>客户端错误</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>服务器错误状态码</td><td>服务器请求出错</td></tr></tbody></table><p>常用的比如说404， 500 ，403， 200等。</p><h3><span id="响应与请求报文构成">响应与请求报文构成</span></h3><h4><span id="请求报文构成">请求报文构成</span></h4><p>请求报文由4部分构成</p><ol><li>请求行<ul><li>在请求行中，包含方法，URL，协议版本</li></ul></li><li>请求头<ul><li>请求头包含头数据，比如Host数据，Content-Type，Connection连接方式，内容长度等。</li></ul></li><li>空行<ul><li>将数据体和头分开</li></ul></li><li>数据体<br> 包含请求数据</li></ol><h4><span id="响应报文构成">响应报文构成</span></h4><p>响应报文与请求报文类似，也是由4部分构成。</p><ol><li>状态行，包含协议版本，状态码，状态码描述。</li><li>响应头，内含响应时间，响应长度，Content-type等数据。</li><li>空行，仍然是分割作用</li><li>响应体，响应的报文数据。</li></ol><h3><span id="http长连接">HTTP长连接</span></h3><p>HTTP的长连接机制是为了减少反复重新建立TCP连接而出现的，减少tcp连接可以减少socket的内核调用。相较于TCP长连接，TCP长连接的keepAlive机制则更有可能导致长时间的系统资源占用。</p><h2><span id="https的基本工作原理">HTTPS的基本工作原理</span></h2><p>HTTPS工作在原本的HTTP的基础上，增加了SSL/TLS协议，共同组成HTTPS的加密数据传输方式。</p><p>在HTTPS中，对称加密和非对称加密共同作用，数据使用对称加密传输，而对于对称加密中的密钥，采用非对称加密传输。</p><p>在HTTPS传输过程中，涉及三个密钥。</p><p>其中两个是服务端生成的公钥和私钥用来进行非对称加密。</p><p>另一个是客户端生成的随机密钥，用来进行对称加密。</p><p>具体流程如下描述：</p><ol><li><p>客户端向服务器发送HTTPS请求，连接到服务器的443端口。</p></li><li><p>服务器收到请求后，将自己手中的公钥发送给客户端。</p></li><li><p>客户端收到服务器的证书后，验证合法性，如果合法，就继续传输，如果不合法，就停止。在合法的情况下，客户端生成一个随机值，用于对称加密的密钥，第一次HTTP请求结束。</p></li><li><p>客户端发起第二个HTTP请求，使用公钥将自己生成的对称加密密钥加密发送给服务端。</p></li><li><p>服务器接收到密文后，使用私钥解密，得到明文的客户端生成的对称加密密钥，服务端将需要响应的数据使用对称加密算法加密，发送给客户端。</p></li><li><p>客户端收到密文，采用对称加密密钥解密得到数据，第二次HTTP请求完成，整个HTTPS请求也完成了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在分析https之前，首先要把http搞清楚。&lt;br&gt;
    
    </summary>
    
    
      <category term="https network" scheme="http://yoursite.com/tags/https-network/"/>
    
  </entry>
  
  <entry>
    <title>pdd-2</title>
    <link href="http://yoursite.com/2020/08/22/pdd-2/"/>
    <id>http://yoursite.com/2020/08/22/pdd-2/</id>
    <published>2020-08-22T10:47:00.000Z</published>
    <updated>2020-10-01T16:12:46.988Z</updated>
    
    <content type="html"><![CDATA[<p>今天面试pdd二面，整体面试感觉很舒服。</p><a id="more"></a><p>简单整理一下提到的问题。</p><ol><li>在实习工作的产出，由于比较保密，所以就没有聊的太深。</li><li>JVM的工作原理简单说一下。</li><li>垃圾回收算法简单说一下</li><li>G1收集器简单说一下，我提到了Eden区和survive区，使用的复制算法和清除整理算法。简单说了一下RememberSet的工作原理。</li><li>多线程了解不，来说一下线程池的几个参数吧。</li><li>既然你说到了工作队列，来说几个常用的工作队列吧（说了三个，他说有4个）</li><li>你平常用的JDK多少啊（我说JDK11），11的新特性有哪些啊（没说，没怎么用新特性）</li><li>现在比较推荐的JDK版本（回答最新的马上出14，11和14都是长时间支持版本）</li><li>好吧，那我们说一些1.8的东西吧，1.8了解哪些（我说流式和ConcurrentHashMap的变化）</li><li>刚好说道CHM，那说说1.8 CHM有什么变化（红黑树，分段锁被CAS的节点锁替换）</li><li>那说一下CAS在1.8 CHM里是怎么用的吧。（说节点锁，采用Unsafe类封装，提高并发粒度）</li><li>那么CAS是怎么保证原子性的呢（这个地方没有答道点子上，说的volatile关键字保证的可见性和防止重排序，面试官说实际上使用的是cpu内部指令，但我说的好像也是对的样子）</li><li>说了CAS，你也提到了红黑树，那我们来说一下红黑树。红黑树的特性是什么。</li><li>红黑树和AVL树有什么区别（脑子抽了没答出来）</li><li>那既然说了红黑树，就来实现一个数据结构吧，实现一个二分查找树吧。（先实现的递归搜索和插入）</li><li>思考一下删除（左右一边为空很快就说出来了，左右同时不为空的情况刚开始没说清楚，后来举例说明白了）</li><li>好的那么我们在做一个题吧：<br>n个小朋友坐成一个环，1号小朋友排一下手，下一轮两边的小朋友也要拍一下手，以此类推，问1号小朋友在m轮游戏后拍了多少次手。（由于笔者还有20分钟就要考试，初始想法是模拟，采用队列的方式，简单给面试官口述了一下，也算是认可了吧）</li><li>智力题，他没给</li><li>反问，问了面试官的部门，问了拼多多未来会不会采用自己的登录模块。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天面试pdd二面，整体面试感觉很舒服。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>拼多多服务端一面</title>
    <link href="http://yoursite.com/2020/08/17/pdd-1/"/>
    <id>http://yoursite.com/2020/08/17/pdd-1/</id>
    <published>2020-08-17T14:37:51.000Z</published>
    <updated>2020-10-01T16:12:53.877Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li>首先是自我介绍，简单介绍一下自己会的和项目经历。</li><li>30秒内说出2的64次方是多少</li><li>堆内存和栈内存的区别</li><li>TCP和UDP的区别，TCP的有序性体现在哪里。</li><li>协程和线程的区别，协程的优势，协程的实际场景的应用（IO密集型）</li><li>LevelDB（没听过）</li><li>分布式一致性算法（不知道）</li><li>乐观锁和悲观锁在MySQL里的实现方式</li><li>MapReduce的原理，Flink的原理</li><li>算法题：回形数组打印</li><li>智力题，1分钟内说出用3L和5L的量筒称出4L水</li><li>智力题，64匹马，不能计时，最少需要赛跑几次才能选出最快的4匹马</li><li>项目：围绕Redis说了一阵：</li></ol><ul><li>Redis代替Session做分布式缓存</li><li>Redis的几种数据结构</li><li>Redis做缓存优于Mysql做缓存的几个方面</li><li>Redis的淘汰策略</li></ul><ol start="14"><li>项目：围绕数据库说了一下，</li></ol><ul><li>存储过程和函数</li><li>Last_Insert_Id函数的线程安全性</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;首先是自我介绍，简单介绍一下自己会的和项目经历。&lt;/li&gt;
&lt;li&gt;30秒内说出2的64次方是多少&lt;/li&gt;
&lt;li&gt;堆内存和栈内存的区别&lt;/li&gt;
&lt;li&gt;TCP和UDP的区别，TCP的有序性体现在哪里。&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud微服务实战（一） 建立公共POJO，建立发现注册中心、云端配置中心</title>
    <link href="http://yoursite.com/2020/06/14/springcloud-5/"/>
    <id>http://yoursite.com/2020/06/14/springcloud-5/</id>
    <published>2020-06-14T11:03:41.000Z</published>
    <updated>2020-10-01T16:12:29.969Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="业务假设">业务假设</span></h1><p>我们假设现在有个需求的商城业务，商城业务需要提供：用户服务，物品服务，订单服务，购物车服务。</p><a id="more"></a><h1><span id="提取公共pojo">提取公共POJO</span></h1><p>有了切实的业务需求，那么抽取出系统中通用的POJO，并将其使用Maven打包。</p><h2><span id="建立方式">建立方式</span></h2><p>首先在maven父项目下创建新的maven项目，命名project_common.<br><img src="/img/project_common.png" alt="创建项目"></p><p>在其中创建需要的统一对象。</p><p>我们先创建用户对象和货物对象，同时创建通用响应数据。</p><p><img src="/img/pojo_common.png" alt="创建对象"></p><p>通过使用maven打包，可以让项目中的其他子模块访问。</p><p>编写pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>project.com<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建maven运行指令：</p><p><img src="/img/enter_config.png" alt="选择创建"></p><p><img src="/img/maven_command.png" alt="创建指令"></p><p>然后运行指令。</p><h1><span id="建立发现注册中心">建立发现注册中心</span></h1><p>参照本教程的前驱教程，设置自己的发现注册中心</p><h1><span id="建立云端配置中心">建立云端配置中心</span></h1><p>在此处介绍一个云端配置中心的概念，spring cloud config，该模块的功能是提供一个公共配置中心，项目的配置文件从配置中心读取，配置中心从github上读取。</p><p>首先介绍maven依赖文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖父项目--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project_web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.config<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR5<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入云端配置中心--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后编写配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#配置中心程序名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">project-config-center</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="comment">#读取的github仓库</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/zhangyonglele/springcloudcofig/</span></span><br><span class="line">          <span class="comment">#用户名</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">zhangyonglele</span></span><br><span class="line">          <span class="comment">#密码</span></span><br><span class="line">          <span class="attr">password:</span> <span class="comment">############</span></span><br><span class="line">      <span class="comment">#文件所在的分支   </span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6869</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost1:7001/eureka/,http://localhost2:7002/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">project-config-center-6869</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">info:</span></span><br></pre></td></tr></table></figure><p>在启动程序上添加启动注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样云端配置中心就配置完成了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;业务假设&quot;&gt;&lt;a href=&quot;#业务假设&quot; class=&quot;headerlink&quot; title=&quot;业务假设&quot;&gt;&lt;/a&gt;业务假设&lt;/h1&gt;&lt;p&gt;我们假设现在有个需求的商城业务，商城业务需要提供：用户服务，物品服务，订单服务，购物车服务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springcloud" scheme="http://yoursite.com/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud实战(三) Zuul网关与非授权访问拦截</title>
    <link href="http://yoursite.com/2020/06/14/springcloud-7/"/>
    <id>http://yoursite.com/2020/06/14/springcloud-7/</id>
    <published>2020-06-13T18:48:50.000Z</published>
    <updated>2020-10-01T16:12:41.892Z</updated>
    
    <content type="html"><![CDATA[<p>我们采用zuul网关来联合过滤我们的内部服务是否可以被访问到，防止外部未授权访问越界访问内部微服务。</p><a id="more"></a><p>有些人可能会问，即使我们使用了网关，外界依然可以通过端口号访问。</p><p>实际上我们需要配置服务器安全组，或是防火墙，屏蔽其他端口，仅留下网关端口供外界访问即可。</p><h2><span id="网关路由配置">网关路由配置</span></h2><p>如果需要maven依赖，可以去查阅前面的部分，我们这里直接开始编写配置文件。</p><p>当然你也可以编写云端配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7799</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-zuul-gateway</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#指定微服务发现中心</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost1:7001/eureka/,http://localhost2:7002/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">user-zuul-7799</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="comment">#路由配置，这里的路由配置可以自己起名</span></span><br><span class="line">    <span class="attr">test-api:</span></span><br><span class="line">      <span class="comment">#指定用户转发路由，即将/user/**转发到project-user-service中，即/user/login转发到服务的/login</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/user/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">project-user-service</span></span><br><span class="line">      <span class="comment">#设置通过网关保存session访问</span></span><br><span class="line">      <span class="attr">sensitiveHeaders:</span> <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#配置redis</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">5MB</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#Redis config</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="comment"># Redis password</span></span><br><span class="line">    <span class="comment">#password: 123456</span></span><br><span class="line">    <span class="comment"># connection timeout maximum accept 2000ms</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">2000ms</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment"># Maximum connection pool size</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># Maximum blocking time accept, negative number represent no limitation</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line">        <span class="comment"># Maximum free connection accept</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># Minimum free connection accept</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="comment">## Entry expiration in milliseconds. By default the entries never expire.</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="string">1d</span></span><br><span class="line">      <span class="comment"># Writing to Redis need key prefix</span></span><br><span class="line">      <span class="attr">use-key-prefix:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">session:</span></span><br><span class="line">    <span class="attr">store-type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">30M</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure><p>在启动类上打开配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span> <span class="comment">//启动分布式session</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//启动发现服务</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">//启动zuul</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserZuulApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下俩编写拦截业务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定在过滤前启动</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定过滤顺序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext current = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = current.getRequest();</span><br><span class="line">        String url = request.getRequestURI();</span><br><span class="line">        log.info(url);</span><br><span class="line">        <span class="comment">//如果是login请求，则直接通过</span></span><br><span class="line">        <span class="keyword">if</span>(url.contains(<span class="string">"login"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则访问被过滤</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext current = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = current.getRequest();</span><br><span class="line">        <span class="comment">//获取请求的session</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//获取session授权信息</span></span><br><span class="line">        String auth = (String) session.getAttribute(<span class="string">"auth"</span>);</span><br><span class="line">        <span class="keyword">if</span>(auth == <span class="keyword">null</span> || !auth.equals(<span class="string">"ok"</span>))&#123;</span><br><span class="line">            <span class="comment">//如果访问未授权，则拦截</span></span><br><span class="line">            current.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            current.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                current.getResponse().getWriter().write(<span class="string">"&#123;\"errorCode\":-1,\"message\":\"auth refuse\"&#125;"</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则通过</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们采用zuul网关来联合过滤我们的内部服务是否可以被访问到，防止外部未授权访问越界访问内部微服务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="springcloud" scheme="http://yoursite.com/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>Springcloud微服务实战(二) 创建用户服务</title>
    <link href="http://yoursite.com/2020/06/14/springcloud-6/"/>
    <id>http://yoursite.com/2020/06/14/springcloud-6/</id>
    <published>2020-06-13T18:08:02.000Z</published>
    <updated>2020-09-02T07:17:23.612Z</updated>
    
    <content type="html"><![CDATA[<p>本章介绍如何创建基本用户服务。</p><a id="more"></a><h2><span id="创建服务的基本依赖">创建服务的基本依赖</span></h2><p>首先提供我们在前一节创建出的User实例代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userPassword;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userEmail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span>  serializableId = -<span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userPassword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserPassword</span><span class="params">(String userPassword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userPassword = userPassword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userEmail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserEmail</span><span class="params">(String userEmail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userEmail = userEmail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们使用的是mybatis ORM层框架，所以需要提供set get方法。</p><p>接下来创建用户服务 project-service</p><p>提供maven文件依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project_web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.user<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR5<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入redis操作和Redis分布式session解决方案--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入eureka发现组件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入云端配置中心的客户端，用于从配置中心读取配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入我们前面自己写的公共POJO--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>project.com<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下俩我们编写配置文件，由于我们从云端读取配置，所以需要两份配置文件。</p><p>首先是原本的application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#指定user服务的名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">project-user-service</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用mybatis，配置mybatis文件</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapping/*.xml</span></span><br></pre></td></tr></table></figure><p>接下来是配置和application.yml同路径下，从云端读取配置文件的配置。</p><p>bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">database-config</span> <span class="comment">#需要从github上读取的资源名称，注意没有yml后缀名</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span>   <span class="comment">#本次访问的配置项</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:6869</span> <span class="comment">#本微服务启动后先去找6869号服务，通过SpringCloudConfig获取GitHub的服务地址</span></span><br></pre></td></tr></table></figure><p>http请求地址和资源文件映射如下:</p><ul><li>/{application}/{profile}[/{label}]</li><li>/{application}-{profile}.yml</li><li>/{label}/{application}-{profile}.yml</li><li>/{application}-{profile}.properties</li><li>/{label}/{application}-{profile}.properties</li></ul><p>即我们读取的是<a href="https://github.com/zhangyonglele/springcloudcofig/master/database-config-dev.yml。" target="_blank" rel="noopener">https://github.com/zhangyonglele/springcloudcofig/master/database-config-dev.yml。</a></p><p>配置完成后目录接口如下：</p><p><img src="/img/cloud_config.png" alt="配置"></p><h2><span id="启动类">启动类</span></h2><p>启动类需要大量的注解来启动各类服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span>  <span class="comment">//启动redis session</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.user.user.mapper"</span>) <span class="comment">//指定mapper位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他部分与常规springboot程序相似。</p><p>分析一个业务，登录业务，因为其用到了spring session分布式解决方案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/info"</span>,produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UniversalResponseBody <span class="title">getUserInfoByUserEmail</span><span class="params">(@RequestParam(<span class="string">"email"</span>)</span> String email)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UniversalResponseBody(<span class="number">0</span>,<span class="string">"success"</span>,userService.getUserByEmail(email));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该注解指定访问url为/login,指定返回数据类型为json，方法为get方法</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/login"</span>,produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UniversalResponseBody <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"email"</span>)</span>String email,</span></span><br><span class="line"><span class="function">                                       @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span>String password,</span></span><br><span class="line"><span class="function">                                       HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">//尝试获取用户数据</span></span><br><span class="line">        User user = userService.getUserByEmail(email);</span><br><span class="line">        <span class="comment">//判断用户数据是否符合要求</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span> || user.getUserEmail().equals(<span class="string">""</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UniversalResponseBody(-<span class="number">1</span>,<span class="string">"error"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(user.getUserPassword().equals(password))&#123;</span><br><span class="line">                <span class="comment">//符合要求后写入redis session</span></span><br><span class="line">                session.setAttribute(<span class="string">"auth"</span>,<span class="string">"ok"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> UniversalResponseBody(<span class="number">0</span>,<span class="string">"success"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> UniversalResponseBody(-<span class="number">1</span>,<span class="string">"error"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时可以采用md5的加密方式，防止明文存储数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章介绍如何创建基本用户服务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Springcloud" scheme="http://yoursite.com/tags/Springcloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud微服务框架(4) Zuul路由转发和过滤器</title>
    <link href="http://yoursite.com/2020/05/10/springcloud-4/"/>
    <id>http://yoursite.com/2020/05/10/springcloud-4/</id>
    <published>2020-05-10T03:08:20.000Z</published>
    <updated>2020-10-01T16:12:18.702Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="zuul简介">Zuul简介</span></h1><p>Zuul的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如／api/user转发到到user服务，/api/shop转发到到shop服务。zuul默认和Ribbon结合实现了负载均衡的功能。<br><a id="more"></a></p><h1><span id="准备">准备</span></h1><p>新创建一个springboot程序，再pom.xml中引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>springclouldtest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springclouldtest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-zuul-7799<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>microservice-zuul-7799<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="开始使用">开始使用</span></h2><p>在其入口applicaton类加上注解@EnableZuulProxy，开启zuul的功能：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceZuul7799Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MicroserviceZuul7799Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加上配置文件application.yml加上以下的配置代码：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7799</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost1:7001/eureka/,http://localhost2:7002/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">mircoservice-zuul-7799</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">  <span class="comment">#这里配置路由转发，将访问/test/**的请求转发到mircoservice-feign服务中</span></span><br><span class="line">    <span class="attr">test-api:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/test/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">mircoservice-feign</span></span><br><span class="line">    <span class="attr">ribbon-api:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/ribbon/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">mircoservice-ribbon</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">microservice-zuul-gateway</span></span><br></pre></td></tr></table></figure></p><p>访问localhost:7799/test/hello和访问前面编写的localhost:7778/hello效果相同，起到了路由转发的功能。</p><h2><span id="服务过滤">服务过滤</span></h2><p>zuul不仅只是路由，并且还能过滤，做一些安全验证。继续改造工程；</p><p>创建文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//表示在路由之前启动</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//过滤顺序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在何种情况下过滤</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext current = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = current.getRequest();</span><br><span class="line">        <span class="comment">//检测是不是带有token参数并且为空</span></span><br><span class="line">        String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span>(token == <span class="keyword">null</span> || token.equals(<span class="string">""</span>))&#123;</span><br><span class="line">            current.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            current.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                current.getResponse().getWriter().write(<span class="string">"&#123;\"errorCode\":-1,\"message\":\"auth refuse\"&#125;"</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>filterType：返回一个字符串代表过滤器的类型，在zuul中定义了四种不同生命周期的过滤器类型，具体如下：</p><ul><li>pre：路由之前</li><li>routing：路由之时</li><li>post： 路由之后</li><li>error：发送错误调用<br>filterOrder：过滤的顺序<br>shouldFilter：这里可以写逻辑判断，是否要过滤，本文true,永远过滤。<br>run：过滤器的具体逻辑。可用很复杂，包括查sql，nosql去判断该请求到底有没有权限访问。</li></ul><blockquote><p>访问localhost:7799/test/hello，返回{“errorCode”:-1,”message”:”auth refuse”}</p><p>但是访问localhost:7799/test/hello?token= 后则正常返回服务</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Zuul简介&quot;&gt;&lt;a href=&quot;#Zuul简介&quot; class=&quot;headerlink&quot; title=&quot;Zuul简介&quot;&gt;&lt;/a&gt;Zuul简介&lt;/h1&gt;&lt;p&gt;Zuul的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如／api/user转发到到user服务，/api/shop转发到到shop服务。zuul默认和Ribbon结合实现了负载均衡的功能。&lt;br&gt;
    
    </summary>
    
    
      <category term="springcloud" scheme="http://yoursite.com/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud微服务框架(3) Hystrix断路器（基于Feign的实现）</title>
    <link href="http://yoursite.com/2020/04/11/springcloud-3/"/>
    <id>http://yoursite.com/2020/04/11/springcloud-3/</id>
    <published>2020-04-11T05:17:28.000Z</published>
    <updated>2020-06-15T18:38:12.263Z</updated>
    
    <content type="html"><![CDATA[<p>断路器的功能是当服务集群与Feign客户端意外断开连接后，外界的服务依旧可能通过Feign试图访问异常服务。Hystrix断路器的功能就是当异常服务断开连接时间达到阈值，则主动将该服务与Feign客户端断开，并且返回指定的fall back响应。<br><a id="more"></a></p><h2><span id="基于feign的断路器实现">基于Feign的断路器实现</span></h2><p>Feign是自带断路器的，在D版本的Spring Cloud中，它没有默认打开。需要在配置文件中配置打开它。</p><p>在application.yml文件中加入<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="comment">#启动熔断器</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>按照前面文章编写yml文件的读者可以注意文件中是否已经打开。</p><p>在Client接口中指定fallback</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"mircoservice-test"</span>,fallback = HelloClientHystric<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">HelloClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Fallback方法，注意要实现现在编写的Client接口，并通过@Component注解注入bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClientHystric</span> <span class="keyword">implements</span> <span class="title">HelloClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"sorry can't visit"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将正在运行的正常服务提供者关闭，就会返回指定的fallback方法内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;断路器的功能是当服务集群与Feign客户端意外断开连接后，外界的服务依旧可能通过Feign试图访问异常服务。Hystrix断路器的功能就是当异常服务断开连接时间达到阈值，则主动将该服务与Feign客户端断开，并且返回指定的fall back响应。&lt;br&gt;
    
    </summary>
    
    
      <category term="Springcloud" scheme="http://yoursite.com/tags/Springcloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud微服务框架(2) Feign</title>
    <link href="http://yoursite.com/2020/04/10/springcloud-2/"/>
    <id>http://yoursite.com/2020/04/10/springcloud-2/</id>
    <published>2020-04-10T14:07:24.000Z</published>
    <updated>2020-04-11T05:18:15.632Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="创建服务消费者">创建服务消费者</span></h1><a id="more"></a><p>承接上文，在创建完服务提供者后，我们就需要创建服务消费者，作为外界访问服务集群的对外接口，同时承担负载均衡的作用。</p><h2><span id="feign客户端服务">Feign客户端服务</span></h2><p>Feign的功能是封装了http的请求，通过http的方式来实现对内部服务的调用和负载均衡的功能。</p><p>在父项目下按照前文相同的方式创建子项目，这次需要引入的feign依赖，同样先贴出maven依赖引入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>springclouldtest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springclouldtest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-comsumer-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>microservice-comsumer-feign<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入maven依赖后，我们需要对所有的服务使用统一进行代理，所以开始对Feign客户端开始编写。</p><p>对于springcloud项目，最重要的就是对配置文件的编写，所以我们先编写配置文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#指定端口号</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7778</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#指定服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mircoservice-feign</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#指定注册中心</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost1:7001/eureka/,http://localhost2:7002/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#声明该服务实例的id</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">mircoservice-feign-7778</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="comment">#启动熔断器</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>配置文件编写完成后，在编写启动类的声明部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">//指定这个服务可以被服务中心发现，是一个被注册进入服务中心的服务</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>  <span class="comment">//指定该服务为Feign客户端，启动feign服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceComsumerFeignApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MicroserviceComsumerFeignApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在声明该程序为feign代理后，编写代理客户端的功能。</p><p>然后编写客户端接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"mircoservice-test"</span>,fallback = HelloClientHystric<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">HelloClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对@FeignClient接口的说明：</p><p>这个注解的功能是声明该接口为feign代理客户端，value中输入注册在服务中心里服务的名称，比如我们在上一篇文章中提供的服务mircoservice-test。而fallback是熔断器相关，以后再进行讲解。</p></blockquote><p>本feign客户端代理的是mirocservice-test服务，那么我们在这里指定，和这个服务相同的url接口，比如说这里指定的hello接口，意思就是通过feign来代理mirocservice-test服务提供的hello接口，并对集群部署的服务进行默认的轮询式负载均衡。</p><p>然后通过controller服务调用该客户端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//代理的客户端</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> HelloClient helloClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//外界访问时的指定的接口</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloClient.sayHello() + <span class="string">" from feign"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问localhost:7778/hello，就可以输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello from **** from feign</span><br></pre></td></tr></table></figure></p><p>这里的<em>**</em>是服务所存在的端口号，如果需要测试集群部署服务，则按照上一篇文章的方法，换一个端口号再创建一个服务提供者即可。</p><p>比如说我在7245和7244端口部署两个相同的服务，并且注册到服务中心。那么这里访问localhost:7778/hello，则会交替出现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello from 7244 from feign</span><br><span class="line"></span><br><span class="line">hello from 7245 from feign</span><br></pre></td></tr></table></figure><h2><span id="ribbon">Ribbon</span></h2><p>Ribbon可以实现相同的功能，具体请各位再自行学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建服务消费者&quot;&gt;&lt;a href=&quot;#创建服务消费者&quot; class=&quot;headerlink&quot; title=&quot;创建服务消费者&quot;&gt;&lt;/a&gt;创建服务消费者&lt;/h1&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>美团一面面经</title>
    <link href="http://yoursite.com/2020/04/02/meituan-1/"/>
    <id>http://yoursite.com/2020/04/02/meituan-1/</id>
    <published>2020-04-02T07:36:33.000Z</published>
    <updated>2020-04-06T03:29:42.506Z</updated>
    
    <content type="html"><![CDATA[<p>究极猛男，今天美团一面究极刺激，普通知识一大堆，问到的盲区也不少，做个整理。</p><p><strong>然后就是尼玛的迭代先序二叉树！！！！！！尼玛的脑子抽了！！！！！！</strong></p><a id="more"></a><p>凉了就凉了吧，心理准备好了，面试官人很nice，说话很和蔼，问问题虽然有点严肃，但是真的很不错。</p><p>一个小时的面试，强度还是很高的。</p><ol><li><p>java集合，list和set的区别</p></li><li><p>线程池，最后的最后handlr要说几个只说了一个，拉跨了，还有一个corePollSize怎么设置，这个也击中知识盲区</p></li><li><p>sychronized和volatile</p></li><li><p>fianl和static</p></li><li><p>重排序相关</p></li><li><p>atomNumber相关</p></li><li><p>reentranLock重入锁是怎么实现的(这个答得莫能两可，感觉很差)</p></li><li><p>Callable和FutrueTask</p></li><li><p>ThreadLocal</p></li><li><p>各种引用方式，弱引用，强应用，幻影引用，最后软引用(没答上来)</p></li><li><p>JVM相关，数据区，回收算法，类加载器有哪些（没答出来），双亲委派机制</p></li><li><p>mysql相关Innodb索引结构，数据库隔离级别（莫名其妙答成几种情况了），最左匹配原则（好像答错了）</p></li><li><p>数据库中的乐观锁和悲观锁</p></li><li><p>CAS</p></li><li><p>spring的事务传播级别（没答上），bean装载的方式，aop</p></li><li><p>代理模式的实现手段，答了三个JDK,CGLIB,ASPECTJ</p></li><li><p>计算机网络，TCP流量控制</p></li><li><p>mybatis $和#的区别</p></li><li><p>redis为什么快，写入磁盘的两种方式，redis中的key过期时间怎么实现的</p></li><li><p>cookie和session的区别，过期时间怎么实现的</p></li><li><p>MAP是怎么实现寻找功能的</p></li><li><p>手撕二叉树迭代先序遍历</p></li></ol><p>我再不会写我是dog。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preTranver</span><span class="params">(Node tree)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(stack.size() &gt; <span class="number">0</span> || tree != <span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.print(tree.val + <span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span>(tree != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(tree);</span><br><span class="line">            tree = tree.left;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            tree = stack.pop();</span><br><span class="line">            tree = tree.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;究极猛男，今天美团一面究极刺激，普通知识一大堆，问到的盲区也不少，做个整理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然后就是尼玛的迭代先序二叉树！！！！！！尼玛的脑子抽了！！！！！！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java工厂模式 与 抽象工厂模式</title>
    <link href="http://yoursite.com/2020/03/22/java-factory/"/>
    <id>http://yoursite.com/2020/03/22/java-factory/</id>
    <published>2020-03-22T03:21:03.000Z</published>
    <updated>2020-03-28T17:12:38.402Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式的核心思想是延后实例化时间，让创建对象这个过程延迟到子类进行。从而不用知道具体是哪个类进行的实例化，也不用了解这个类实例化需要的参数和具体过程。我们只用知道这个类的名称就可以来进行实例化了。<br><a id="more"></a><br>通过一个接口，某些继承这些接口的类不进行主动实例化，而是通过一个“工厂”来决定生产什么类，调用工厂的地方只需要指定实例化哪一个类就可以了。</p><h2><span id="传统工厂类型">传统工厂类型</span></h2><p>传统工厂类型，通过定义一个通用接口，让其他继承此接口的类被一个公用工厂实例化。不需要知道每个类是如何实例化或者类确切的名字。</p><p><img src="/img/factory.jpg" alt="factory"></p><p>让我们用代码实现他，同时使用枚举类来优化工厂创建过程。</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TV</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义两种不同品牌的TV<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiTV</span> <span class="keyword">implements</span> <span class="title">TV</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HuaweiTV</span><span class="params">(<span class="keyword">int</span> ID)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HWproduct ID id"</span> + ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Huawei Showing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMiTV</span> <span class="keyword">implements</span> <span class="title">TV</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XiaoMiTV</span><span class="params">(<span class="keyword">int</span> ID)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Miproduct ID id"</span> + ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"XiaoMi Showing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后为了防止外部调用者知道内部构造实现，我们使用工厂封装其创建过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TVFactory&#123;</span><br><span class="line">    HuaweiTV,XiaoMiTV;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TV <span class="title">newTV</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> HuaweiTV:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HaweiTV(<span class="number">9930</span>);</span><br><span class="line">            <span class="keyword">case</span> XiaoMiTV:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> XiaoMiTV(<span class="number">3270</span>);</span><br><span class="line">            <span class="keyword">default</span> :</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"无效参数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在外部调用工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    TVFactory.HuaweiTV.newTV().show();;</span><br><span class="line">    TVFactory.XiaoMiTV.newTV().show();;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HWproduct ID id9930</span><br><span class="line">Huawei Showing</span><br><span class="line">Miproduct ID id3270</span><br><span class="line">XiaoMi Showing</span><br></pre></td></tr></table></figure></p><h2><span id="抽象工厂类型">抽象工厂类型</span></h2><p>抽象工厂模式实际上是一种工厂的工厂，它定义了一个工厂的规范，当某个类继承了某个接口或是抽象类，便是继承了某一种工厂规范，继承了这种工厂规范，便需要实现工厂规范中设计的产品。</p><p>我们同样以H厂和M厂来举例子。</p><p>首先定义工厂规范，除了TV以外，这两个厂子还生产Phone。TV我们沿用上面定义的TV</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(<span class="keyword">int</span> tel)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiPhone</span> <span class="keyword">implements</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HuaweiPhone</span><span class="params">(<span class="keyword">int</span> ID)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HW Phone ID id"</span> + ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(<span class="keyword">int</span> tel)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Huawei call the number:"</span> + tel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMiPhone</span> <span class="keyword">implements</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XiaoMiPhone</span><span class="params">(<span class="keyword">int</span> ID)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mi Phone ID id"</span> + ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"XiaoMi call the number:"</span> + tel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以定义一种工厂叫做EEFactory，用于生产手机和电视。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EEFactory</span></span>&#123;</span><br><span class="line">    <span class="function">Phone <span class="title">makePhone</span><span class="params">(<span class="keyword">int</span> ID)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TV <span class="title">makeTV</span><span class="params">(<span class="keyword">int</span> ID)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来定义H家和M家不同的工厂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiFactory</span> <span class="keyword">implements</span> <span class="title">EEFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">makePhone</span><span class="params">(<span class="keyword">int</span> ID)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiPhone(ID);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">makeTV</span><span class="params">(<span class="keyword">int</span> ID)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HuaweiTV(ID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMiFactory</span> <span class="keyword">implements</span> <span class="title">EEFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">makePhone</span><span class="params">(<span class="keyword">int</span> ID)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XiaoMiPhone(ID);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">makeTV</span><span class="params">(<span class="keyword">int</span> ID)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XiaoMiTV(ID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以通过EE工厂来接受H家的工厂和M家的工厂来实例化对象啦，同样可以采用上面的方式，也就是枚举类+内部类的方式来优化抽象工厂模式，让EE工厂成为一个枚举类，在通过将两家的实体工厂内部成为静态方法，静态就可实例化对象，非常的方便。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工厂模式的核心思想是延后实例化时间，让创建对象这个过程延迟到子类进行。从而不用知道具体是哪个类进行的实例化，也不用了解这个类实例化需要的参数和具体过程。我们只用知道这个类的名称就可以来进行实例化了。&lt;br&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>尝试构造出自己的MVC框架（二），IOC和DI的实现</title>
    <link href="http://yoursite.com/2020/03/21/my-mvc-framework-2/"/>
    <id>http://yoursite.com/2020/03/21/my-mvc-framework-2/</id>
    <published>2020-03-21T09:44:19.000Z</published>
    <updated>2020-03-21T10:06:26.333Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="第二天">第二天</span></h1><p>在Spring中，常常使用@AutoWired的方式来进行IOC的操作，从而实现DI。这里在对Bean管理的实现基础上，就可以实现对所有被管理的Bean进行IOC的实现。</p><a id="more"></a><p>IOC，也就是控制反转，其中最常见的实现方式就是DI（依赖注入）。常用的注入方式有三种，基于接口，基于setter，基于构造函数，笔者由于比较懒，只实现基于接口的DI。同时基于接口的DI，也是我们比较常见的一种方式，但是这种方式有一定的缺陷。在这里不对这种缺陷具体描述。</p><p>既然是基于接口的DI，那么我们就要对某一个接口来注入某个实现了该接口的类，从而不用手动来new这个类。</p><p>在常见的spring操作中，是如下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span></span>&#123;</span><br><span class="line">    <span class="meta">@AutoWired</span></span><br><span class="line">    <span class="keyword">private</span> SomeService someService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样之后，实现了SomeService接口的类就会被自动注入到这个引用中，而我们在今天的任务就是实现注入。</p><h2><span id="自定义注解为需要管理的bean示例打上tag">自定义注解，为需要管理的Bean示例打上tag</span></h2><p>我们实现在Spring中常用的几种注解，分别是Controller，Service，Component。同时实现AutoWired来实现DI。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里指定AutoWired只能打在成员变量身上</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoWired &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="基于注解实现ioc">基于注解实现IOC</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BeansHome beansHome;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IOC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        beansHome = BeansHome.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取实现某个接口的类，用于准备IOC注入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interfaceClass 被实现的接口名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个被定位到的实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; getImplementClass(<span class="keyword">final</span> Class&lt;?&gt; interfaceClass)&#123;</span><br><span class="line">        <span class="keyword">return</span> beansHome.getExtendingClass(interfaceClass)</span><br><span class="line">                .stream()</span><br><span class="line">                <span class="comment">//由于默认一个接口只有一个实现类所以可以用这种方式，如果一个接口有多个实现类则这个方法就会出现问题</span></span><br><span class="line">                .findFirst()</span><br><span class="line">                .orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据类获取类实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">getInstance</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用Optional优雅解决判空问题</span></span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(beansHome.getBean(clazz))</span><br><span class="line">                .orElse(</span><br><span class="line">                        Optional.ofNullable(beansHome.getBean(getImplementClass(clazz))).orElse(<span class="keyword">null</span>)</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doDI</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取所有的bean示例，依次进行依赖注入</span></span><br><span class="line">        <span class="keyword">for</span>(Class&lt;?&gt; clazz : beansHome.getAllClasses())&#123;</span><br><span class="line">            <span class="comment">//获取bean</span></span><br><span class="line">            <span class="keyword">final</span> Object bean = beansHome.getBean(clazz);</span><br><span class="line">            <span class="comment">//获取bean上的成员变量</span></span><br><span class="line">            Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">            <span class="comment">//遍历成员变量</span></span><br><span class="line">            <span class="keyword">for</span>(Field field : fields)&#123;</span><br><span class="line">                <span class="comment">//检测该成员变量是否被@AutoWired标注</span></span><br><span class="line">                <span class="keyword">if</span>(field.isAnnotationPresent(AutoWired<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line">                    <span class="comment">//如果被标注，获取获取该变量</span></span><br><span class="line">                    <span class="keyword">final</span> Class&lt;?&gt; fieldClass = field.getType();</span><br><span class="line">                    <span class="comment">//获取到被标注的变量类型</span></span><br><span class="line">                    Object fieldValue = getInstance(fieldClass);</span><br><span class="line">                    <span class="keyword">if</span>(fieldValue != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="comment">//如果存在，则调用在前一章写到的方法进行注入</span></span><br><span class="line">                        ClassHelper.setField(field,bean,fieldValue);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"注入失败，试图注入"</span>+fieldClass.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二天&quot;&gt;&lt;a href=&quot;#第二天&quot; class=&quot;headerlink&quot; title=&quot;第二天&quot;&gt;&lt;/a&gt;第二天&lt;/h1&gt;&lt;p&gt;在Spring中，常常使用@AutoWired的方式来进行IOC的操作，从而实现DI。这里在对Bean管理的实现基础上，就可以实现对所有被管理的Bean进行IOC的实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架与设计" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud微服务框架(1) 服务的发现和注册</title>
    <link href="http://yoursite.com/2020/03/19/springcloud-1/"/>
    <id>http://yoursite.com/2020/03/19/springcloud-1/</id>
    <published>2020-03-19T13:44:18.000Z</published>
    <updated>2020-05-10T03:27:13.091Z</updated>
    
    <content type="html"><![CDATA[<p>SpringCloud，一个神奇的微服务框架，他的功能在于将一个大的spring服务，拆分成多个小的部件，各负责一部分功能，从而减小每个部件的体积和内容，每个服务组件只用专注于一个很小的部分，效率比较高。同时又是松耦合结构，开发和部署都是独立进行的。</p><a id="more"></a><p>于此同时的代价就是开发人员要面对分布式系统的部分复杂问题。大量的分布式组件也会使得维运变得困难。服务之间的内部调用网络深不见底。数据一致性问题也需要分布式锁同步才能实现。各组件间的通信成本也比较高。</p><p>那么就开始微服务的入门和配置开发吧。</p><p>首先对微服务的架构和内容做一些讲解，以便于比较好的理解微服务。</p><h1><span id="cap理论">CAP理论</span></h1><p>什么是cap理论呢，CAP理论有一点像ACID理论。具体来说：</p><ol><li>C:consistency，数据一致性，数据一致性要求所有节点拥有最新版本的数据。</li><li>A:availability，可用性，数据要求具有高可用性。</li><li>P:partition-tolerance，容忍网络出现分区，分区值之间网络不可达</li></ol><p>在CAP理论上，这三点是不可能共存的，最多实现两种，CA,AP,CP都是可以的。</p><p>但是这里指的其实是一种极端一致和极端可用，并不是说选择了一种另一种就完全不能保证。</p><p>由于在分布式系统中，分区容错性是必须要保证的，所以我们只能在AC中选择一个来实现。</p><h1><span id="springcloud服务的基本架构">SpringCloud服务的基本架构</span></h1><p>在SpringCloud中，要将一个大型服务拆分成多个小服务，要解决的问题如下：</p><ol><li>多组件的统一管理（解决方案：高可用性的服务注册和发现组件Eureka）</li><li>单一服务的集群化配置，服务提供的实体</li><li>代理集群式服务的统一接口，即消费提供的服务的接口（feign和ribbon），并提供负载均衡的功能。以及微服务之间的调用</li><li>当集群化服务中的某个服务与代理接口连接超时，自动熔断连接（Hystrix熔断器）</li><li>分布式服务器的负载均衡和请求分发（zuul实现的负载均衡）</li><li>服务器内部的网关集群和网关过滤器（zuul实现的网关和权限控制集群）</li><li>分布式服务的通用化配置文件读取和自动配置（config）</li></ol><p><img src="/img/springcloud.jpeg" alt="springcloud服务架构"></p><p>Springcloud并不是通过rpc的方式来调用服务的，而是通过http接口，所以对传统后端开发者来说比较友好，上手非常快同时也比较好理解。</p><h1><span id="准备工作">准备工作</span></h1><p>修改hosts文件，将127.0.0.1 localhost修改为</p><p>127.0.0.1 localhost1 localhost2</p><p>在idea中首先创建一个maven项目，作为springcloud测试项目的父项目，统一管理一部分依赖.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>springclouldtest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springclouldtest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>microservice-eureka<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mircoservice-eureka-7002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1><span id="eureka服务注册和发现">Eureka服务注册和发现</span></h1><p>在父项目中创建module，可以使用IDEA提供的spring initializr，引入spring cloud discovery中的eureka server，首先创建一个Eureka服务注册中心：</p><p>子项目pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>springclouldtest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springclouldtest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>microservice-eureka<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在项目启动入口上加上启动Eureka Server的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//启动eureka服务器</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceEurekaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MicroserviceEurekaApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中编写：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost1</span> <span class="comment">#eureka服务端的实例名称(这里使用了虚拟主机映射，修改hosts文件即可实现)</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#单机 defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost1:7001/eureka/</span></span><br></pre></td></tr></table></figure><p>然后启动项目，访问localhost1:7001，就可以看到服务注册的信息了。</p><h2><span id="高可用性的eureka注册中心">高可用性的Eureka注册中心</span></h2><p>和上面讲解的一样，再创建一个eureka server子项目，只对这两个eureka server项目的配置文件进行修改：</p><p>eureka1:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost1</span> </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     </span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     </span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost2:7002/eureka/</span> <span class="comment">#这里修改为其他eureka的服务地址，多个则用逗号隔开</span></span><br></pre></td></tr></table></figure><p>eureka2:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost2</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     </span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     </span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost1:7001/eureka/</span> <span class="comment">#这里修改为其他eureka的服务地址，多个则用逗号隔开</span></span><br></pre></td></tr></table></figure></p><p>然后访问任意节点的控制中心，就可以在DS Replicas看到其他eureka服务的出现。</p><h2><span id="eureka的自我保护机制">Eureka的自我保护机制</span></h2><p>默认情况下，如果Eureka Server在一定时间内（默认90秒）没有接收到某个微服务实例的心跳，Eureka Server将会移除该实例。但是当网络分区故障发生时，微服务与Eureka Server之间无法正常通信，而微服务本身是正常运行的，此时不应该移除这个微服务，所以引入了自我保护机制。</p><ol><li><p>自我保护模式正是一种针对网络异常波动的安全保护措施，使用自我保护模式能使Eureka集群更加的健壮、稳定的运行。</p></li><li><p>自我保护机制的工作机制是如果在15分钟内超过85%的客户端节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，Eureka Server自动进入自我保护机制</p></li></ol><p>注意：该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务。 如果eureka因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到eureka server了，因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。 所以，eureka server在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，eureka会自动退出保护模式。自我保护模式可以让集群更加健壮。</p><h1><span id="创建服务提供者">创建服务提供者</span></h1><p>在注册注册中心创建完成后，我们再来尝试一下向注册中心中注册一个web服务。</p><p>在项目中创建子项目，同样使用spring initializr，然后编写pom.xml依赖文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>springclouldtest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springclouldtest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>microservice-provider-7245<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>microservice-provider-7245<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入依赖后，设置application.yml配置文件：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#指定端口号</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7245</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#向注册中心声明自己的服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mircoservice-test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#指定注册注册中心位置</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost1:7001/eureka/,http://localhost2:7002/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#本实例在注册中心的id信息</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">mircoservice-provider-7245</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">info:</span></span><br></pre></td></tr></table></figure></p><p>在程序运行入口增加注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//将程序声明为eureka客户端注册进服务中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceProvider7245Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MicroserviceProvider7245Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后编写测试Controller<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello from "</span>+port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后启动服务中心，再启动服务提供者。</p><p>访问服务中心:localhost:7001</p><p><img src="/img/springcloud-provider-start.png" alt="注册中心"></p><p>可以发现服务已经被注册进服务中心了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringCloud，一个神奇的微服务框架，他的功能在于将一个大的spring服务，拆分成多个小的部件，各负责一部分功能，从而减小每个部件的体积和内容，每个服务组件只用专注于一个很小的部分，效率比较高。同时又是松耦合结构，开发和部署都是独立进行的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>尝试构造出自己的MVC框架（一），Bean管理和Bean自动装配</title>
    <link href="http://yoursite.com/2020/03/08/my-mvc-framework-1/"/>
    <id>http://yoursite.com/2020/03/08/my-mvc-framework-1/</id>
    <published>2020-03-08T15:23:19.000Z</published>
    <updated>2020-03-21T09:45:16.373Z</updated>
    
    <content type="html"><![CDATA[<p>在系统学习了多线程和设计模式之后，想利用自己学到的知识，结合Spring框架的部分IOC，DI,AOP思想，构造出自己的MVC框架。</p><a id="more"></a><p>在开篇要感谢博主的原文给我的灵感和动力，参考了他不少的代码架构和部分思路，同时加以自己的学习实践。<a href="https://github.com/zzzzbw/doodle" target="_blank" rel="noopener">原作者github地址</a>。</p><h1><span id="第一天bean的管理和bean的装配">第一天：Bean的管理和Bean的装配</span></h1><p>在Spring框架中，Bean的管理和自动装配是交给Spring管理的，在开始运行程序的时候，就通过反射的方式将类进行实例化，并且形成单例模式的各个类(这点存疑，Spring本身可以选择是以单例模式实现还是以原型模式实现，在本文的实现中我将尽可能的采用单例模式)。</p><p>所以Bean的初始化和装配就是框架的最基础的部分。</p><p>Spring是通过注解的方式，扫描项目并且将自己编写的类装载在Beans中的，所以第一步就是需要创建一个Bean的存储和管理机制。</p><p>Bean实际上就是一个一个要被程序加载的类实例，在一个web容器中，需要来管理每一个编写的类方法，而这就是类容器。</p><p>微型框架采用比较简单的HashMap直接进行管理就可以。</p><p>首先将整个一份代码发上来，该部分用于构建bean管理器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeansHome</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存储BeansHome唯一实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> BeansHome instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断Beans是否被加载</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isLoad;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义过的注解</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;? extends Annotation&gt;&gt; ANNOTATIONS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ANNOTATIONS = Arrays.asList(Controller<span class="class">.<span class="keyword">class</span>, <span class="title">Component</span>.<span class="title">class</span>, <span class="title">Service</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储beans的根基</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Class&lt;?&gt;,Object&gt; beans = <span class="keyword">new</span> ConcurrentHashMap&lt;Class&lt;?&gt;, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BeansHome</span><span class="params">()</span></span>&#123;</span><br><span class="line">        isLoad = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkLoadingStatus</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isLoad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//双重校验锁方式实现单例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BeansHome <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (BeansHome<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> BeansHome();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取bean实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(Class&lt;?&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(clazz == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beans.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入Bean实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">putBean</span><span class="params">(Class&lt;?&gt; clazz,Object singletonObj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.put(clazz,singletonObj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashSet&lt;Object&gt; <span class="title">getAllBeans</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;Object&gt;(beans.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有类</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getAllClasses()&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.keySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeBean</span><span class="params">(Class&lt;?&gt; clazz)</span></span>&#123;</span><br><span class="line">        beans.remove(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BeansHome大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">BeansHomeSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有被某种注解设置的Class</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getAnnotationClass(Class&lt;? extends Annotation&gt; annotation)&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.keySet()</span><br><span class="line">                .stream()</span><br><span class="line">                .filter(p -&gt; p.isAnnotationPresent(annotation))</span><br><span class="line">                .collect(Collectors.toSet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过实现类或者父类来获取的Class</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getExtendingClass(Class&lt;?&gt; superClass)&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.keySet()</span><br><span class="line">                .stream()</span><br><span class="line">                .filter(superClass::isAssignableFrom)</span><br><span class="line">                .filter(p -&gt; !p.equals(superClass))</span><br><span class="line">                .collect(Collectors.toSet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将Beans全部初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">initBeansHomeAndLoad</span><span class="params">(String packageName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(checkLoadingStatus())&#123;</span><br><span class="line">            log.error(<span class="string">"Beans管理器已经被加载"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//先将加载情况置于被加载</span></span><br><span class="line">            isLoad = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//防止出现多线程加载bean的情况</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Set&lt;Class&lt;?&gt;&gt; beans = ClassHelper.getPackageClass(packageName);</span><br><span class="line">                    beans.stream().filter(bean -&gt; &#123;</span><br><span class="line">                        <span class="keyword">for</span>(Class&lt;? extends Annotation&gt; anno : ANNOTATIONS)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(bean.isAnnotationPresent(anno))&#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;).forEach(bean -&gt; <span class="keyword">this</span>.beans.put(bean,ClassHelper.newInstance(bean)));</span><br><span class="line">                &#125;<span class="keyword">catch</span> (RuntimeException e)&#123;</span><br><span class="line">                    isLoad = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"类被重复加载"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> checkLoadingStatus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="1bean管理器的设计模式">1.bean管理器的设计模式</span></h2><p>为了让整个程序只实例化一份bean，原因很多服务只需要一个实例。所以将管理器设计为单例模式，这里使用了双重校验锁的懒加载来创建单例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双重校验锁方式实现单例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BeansHome <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (BeansHome<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> BeansHome();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="2-bean的自加载">2. bean的自加载</span></h2><p>在一个web程序中，只有被我们所创建的注解所标记的类才会被加载，为了获取这个类是否被注解，就需要使用反射来获取到所有类的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将Beans全部初始化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">initBeansHomeAndLoad</span><span class="params">(String packageName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(checkLoadingStatus())&#123;</span><br><span class="line">        log.error(<span class="string">"Beans管理器已经被加载"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//先将加载情况置于被加载</span></span><br><span class="line">        isLoad = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//防止出现多线程加载bean的情况</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Set&lt;Class&lt;?&gt;&gt; beans = ClassHelper.getPackageClass(packageName);</span><br><span class="line">                <span class="comment">//使用流式遍历指定项目/包中所有的类，检查是否被编写的注解所注释</span></span><br><span class="line">                beans.stream().filter(bean -&gt; &#123;</span><br><span class="line">                    <span class="keyword">for</span>(Class&lt;? extends Annotation&gt; anno : ANNOTATIONS)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(bean.isAnnotationPresent(anno))&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">//接下来把符合要求的类，将类使用反射的方式加载到bean管理器中</span></span><br><span class="line">                .forEach(bean -&gt; <span class="keyword">this</span>.beans.put(bean,ClassHelper.newInstance(bean)));</span><br><span class="line">            &#125;<span class="keyword">catch</span> (RuntimeException e)&#123;</span><br><span class="line">                isLoad = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"类被重复加载"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> checkLoadingStatus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bean的自加载本身需要使用反射的机制遍历包中所有的类，我也将一部分遍历包的代码放在此处，一来熟悉对文件的IO操作，二来熟悉反射的一般应用。</p><h2><span id="使用反射方式加载类">使用反射方式加载类</span></h2><p>使用反射的方式加载类，不再需要将编写的类手动实例化，而是交给bean管理器来管理，在这个部分，就需要文件IO来读取项目中的类，然后使用反射加载，否则将无法加载框架以外的类文件，而且所有的类必须手动实例化，有了反射就可以自动搜索项目文件中的类了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 装载并获取装载的类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className 类的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 类实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadAndGetClass(String className)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Class.forName(className);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            log.error(<span class="string">"load class error, Maybe program never find your class"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过类名来实例化一个类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classname</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">newInstance</span><span class="params">(String classname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class&lt;?&gt; clazz = loadAndGetClass(classname);</span><br><span class="line">            <span class="keyword">return</span> (T)clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"类实例化失败"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过某种确定的类实例化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">newInstance</span><span class="params">(Class&lt;?&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (T)clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"类实例化失败"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过类的路径来获取类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packagePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getClassByPath(Path classPath,Path packagePath,String packageName)&#123;</span><br><span class="line">        String packageNameTest = classPath.toString().replace(packagePath.toString(),<span class="string">""</span>);</span><br><span class="line">        String className = (packageName + packageNameTest).replace(<span class="string">"/"</span>,<span class="string">"."</span>)</span><br><span class="line">                .replace(<span class="string">"\\"</span>,<span class="string">"."</span>)</span><br><span class="line">                .replace(<span class="string">".class"</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loadAndGetClass(className);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从包路径获取包内所有类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageName 包名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回包内的所有类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getPackageClass(String packageName)&#123;</span><br><span class="line">        <span class="comment">//获取到加载的路径</span></span><br><span class="line">        URL url = getClassLoader().getResource(packageName.replace(<span class="string">"."</span>,<span class="string">"/"</span>));</span><br><span class="line">        <span class="keyword">if</span>(url == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"获取项目路径失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//如果是文件则开始加载类并返回包含Class的Set</span></span><br><span class="line">            <span class="keyword">if</span>(url.getProtocol().equals(<span class="string">"file"</span>))&#123;</span><br><span class="line">                <span class="comment">//获取到项目路径下的文件</span></span><br><span class="line">                File file = <span class="keyword">new</span> File(url.getFile());</span><br><span class="line">                <span class="comment">//同时获取项目路径</span></span><br><span class="line">                Path packagePath = file.toPath();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//使用nio的文件遍历项目路径</span></span><br><span class="line">                <span class="keyword">return</span> Files.walk(packagePath)</span><br><span class="line">                        <span class="comment">//使用过滤器来获取所有类文件</span></span><br><span class="line">                        .filter(path -&gt; path.toFile().getName().endsWith(<span class="string">".class"</span>))</span><br><span class="line">                        <span class="comment">//同时将所有的类文件调用加载并且存储</span></span><br><span class="line">                        .map(classPath -&gt; getClassByPath(classPath,packagePath,packageName))</span><br><span class="line">                        <span class="comment">//转化为Set集合</span></span><br><span class="line">                        .collect(Collectors.toSet());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            log.error(<span class="string">"包加载失败"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"包加载异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将类注入一个接口，用于实现IOC</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setField</span><span class="params">(Field field,Object target,Object value)</span></span>&#123;</span><br><span class="line">        setField(field,target,value,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setField</span><span class="params">(Field field,Object target,Object value,<span class="keyword">boolean</span> accessible)</span></span>&#123;</span><br><span class="line">        field.setAccessible(accessible);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            field.set(target,value);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IllegalAccessException e)&#123;</span><br><span class="line">            log.error(<span class="string">"注入属性失败"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"设置属性失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在系统学习了多线程和设计模式之后，想利用自己学到的知识，结合Spring框架的部分IOC，DI,AOP思想，构造出自己的MVC框架。&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架与设计" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记</title>
    <link href="http://yoursite.com/2020/03/06/other-algorithm/"/>
    <id>http://yoursite.com/2020/03/06/other-algorithm/</id>
    <published>2020-03-06T03:17:53.000Z</published>
    <updated>2020-03-28T02:20:37.061Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="leetcode142环形链表">Leetcode.142：环形链表</span></h3><a id="more"></a><h4><span id="题目描述">题目描述：</span></h4><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><p>说明：不允许修改给定的链表。</p><h4><span id="思路分析">思路分析</span></h4><p><strong>双指针法</strong></p><p>定义一个快指针，每次移动两步，定义一个慢指针，每次移动一步</p><p>当快慢指针同时为null，证明没有循环</p><p>当快指针和慢指针同时指向一处，证明链表中有环路，有循环</p><p>然后寻找循环的入口</p><p>设慢指针走了k步，则<br>f(slow) = k</p><p>快指针则走了<br>f(quick) = 2k</p><p>快指针比慢指针多走了若干个环路长度，设多走了n个环路长度，设环路长度为length，则</p><p>f(quick)  = k + n*length</p><p>可得k = n*length</p><p>代码实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode quick = head,slow = head;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(quick != <span class="keyword">null</span>)&#123;</span><br><span class="line">                quick = quick.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(quick != <span class="keyword">null</span>)&#123;</span><br><span class="line">                quick = quick.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(slow != <span class="keyword">null</span>)&#123;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(quick == slow &amp;&amp; quick != <span class="keyword">null</span> &amp;&amp; quick != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(quick == <span class="keyword">null</span> &amp;&amp; slow == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        quick = head;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(slow == quick)&#123;</span><br><span class="line">                <span class="comment">//System.out.println(pos);</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pos ++;</span><br><span class="line">                quick = quick.next;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(pos);</span><br><span class="line">        <span class="keyword">return</span> quick;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>哈希表法</strong></p><p>定义一个哈希set，把访问过的节点装进去</p><h3><span id="路径总和leetcode437">路径总和，leetcode.437</span></h3><h4><span id="题目描述">题目描述</span></h4><p>给定一个二叉树，它的每个结点都存放着一个整数值。</p><p>找出路径和等于给定数值的路径总数。</p><p>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p><p>二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数</p><h4><span id="解题思路">解题思路</span></h4><p>在每一个树节点上进行递归搜索，查找所有符合情况的序列。</p><p>由于需要在每一个节点搜索，同时搜索也是递归搜索，所以是双重递归搜索</p><h4><span id="代码实现">代码实现</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        preTranver(root,sum);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preTranver</span><span class="params">(TreeNode root,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        search(root,sum);</span><br><span class="line">        preTranver(root.left,sum);</span><br><span class="line">        preTranver(root.right,sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(TreeNode root,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum - root.val == <span class="number">0</span>)&#123;</span><br><span class="line">            res ++;</span><br><span class="line">            <span class="comment">//return ;</span></span><br><span class="line">        &#125;</span><br><span class="line">        search(root.left,sum - root.val);</span><br><span class="line">        search(root.right,sum - root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="岛屿数量leetcode200">岛屿数量,leetcode.200</span></h3><h4><span id="题目描述">题目描述</span></h4><p>给定一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。</p><h4><span id="解题思路">解题思路</span></h4><p>要有污染的思路，从一个矩阵点开始进行污染，将所相连的所有陆地全部污染为海洋，函数定义一个污染深度，只有当污染深度为0的时候，才将岛屿计数器+1；</p><h4><span id="代码实现">代码实现</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[][] ma;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        ma = grid;</span><br><span class="line">        <span class="keyword">if</span>(grid.length &lt; <span class="number">1</span> || grid[<span class="number">0</span>].length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> row = <span class="number">0</span>;row &lt; grid.length;row++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> col = <span class="number">0</span>;col &lt; grid[<span class="number">0</span>].length;col++)&#123;</span><br><span class="line">                polute(row,col,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">polute</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( row &lt; <span class="number">0</span> || col &lt; <span class="number">0</span> || row &gt;= ma.length || col &gt;= ma[<span class="number">0</span>].length || ma[row][col] == <span class="string">'0'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            </span><br><span class="line">            ma[row][col] = <span class="string">'0'</span>;</span><br><span class="line">            polute(row - <span class="number">1</span>,col,depth + <span class="number">1</span>);</span><br><span class="line">            polute(row + <span class="number">1</span>,col,depth + <span class="number">1</span>);</span><br><span class="line">            polute(row,col - <span class="number">1</span>,depth + <span class="number">1</span>);</span><br><span class="line">            polute(row,col + <span class="number">1</span>,depth + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(depth == <span class="number">0</span>)&#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="leetcode945使数组唯一的最小增量">LeetCode.945.使数组唯一的最小增量</span></h3><h4><span id="题目描述">题目描述</span></h4><p>给定整数数组 A，每次 move 操作将会选择任意 A[i]，并将其递增 1。</p><p>返回使 A 中的每个值都是唯一的最少操作次数。</p><h4><span id="题目思路">题目思路</span></h4><p>学来的思路，线性探测和路径压缩，刚开始并没有想到路径压缩的方式。</p><p>首先需要一个可以把本题看成是一个hash表，如果为空，则将其插入，如果不为空，则看在该位置指出的下一个可插入的点，将其搜寻过的所有位置都置为最后插入的位置的坐标，该处需要递归实现。</p><h4><span id="代码实现">代码实现</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明开放线性搜寻函数</span></span><br><span class="line">    <span class="keyword">int</span>[] line = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">80000</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minIncrementForUnique</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        Arrays.fill(line,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> temp = <span class="number">0</span>;temp &lt; A.length;temp ++)&#123;</span><br><span class="line">            <span class="comment">//最后插入的位置减去该值，就是最后需要移动的次数</span></span><br><span class="line">            res += findPos(A[temp]) - A[temp];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//搜寻函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPos</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果该位置没有被插入，则直接插入</span></span><br><span class="line">        <span class="keyword">if</span>(line[val] == -<span class="number">1</span>)&#123;</span><br><span class="line">            line[val] = val;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果被插入过了，则搜寻该节点内存储的数据（即从该位置到数据中存储的位置之间，所有的节点都已经被占据）指向的最后位置的下一个位置是否位空，递归实现</span></span><br><span class="line">        <span class="keyword">int</span> resLocal = findPos(line[val]+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//将该位置的值，设置为最后插入的位置，证明中间节点全部为，被占据的</span></span><br><span class="line">        line[val] = resLocal;</span><br><span class="line">        <span class="comment">//返回最后插入的位置</span></span><br><span class="line">        <span class="keyword">return</span> resLocal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="leetcode-820单词的压缩编码">leetcode 820,单词的压缩编码</span></h3><h4><span id="题目描述">题目描述</span></h4><p>给定一个单词列表，我们将这个列表编码成一个索引字符串 S 与一个索引列表 A。</p><p>例如，如果这个列表是 [“time”, “me”, “bell”]，我们就可以将其表示为 S = “time#bell#” 和 indexes = [0, 2, 5]。</p><p>对于每一个索引，我们可以通过从字符串 S 中索引的位置开始读取字符串，直到 “#” 结束，来恢复我们之前的单词列表。</p><p>那么成功对给定单词列表进行编码的最小字符串长度是多少呢？</p><h4><span id="解题思路">解题思路</span></h4><p>这题有点难，上来其实没有什么思路，看一下题目，其实他并不是完全压缩的字符串，由于结束字符的存在，他实际上只能是压缩每个单词的后缀，当单词存在前缀和中间相同的时候他其实并不能被压缩。</p><p>所以第一时间想到的方法其实是集合检测，简单来说，就是先把所有的单词放入集合中，然后对每个单词进行遍历，检查其后缀是否在集合中出现。如果出现了就将其删除。</p><p>官方给出了字典树的实现方式，其实更优，时间复杂度基本要降低一个数量级。但是由于并不是自己想出来的，所以就不给出解答。</p><h4><span id="代码实现">代码实现</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumLengthEncoding</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> temp = <span class="number">0</span>;temp &lt; words.length;temp++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(words[temp]))&#123;</span><br><span class="line">                set.add(words[temp]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">for</span>(String side : words)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> temp = <span class="number">1</span>;temp &lt; side.length();temp++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(side.substring(temp)))&#123;</span><br><span class="line">                    set.remove(side.substring(temp));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(String side:set)&#123;</span><br><span class="line">            res += side.length()+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Leetcode-142：环形链表&quot;&gt;&lt;a href=&quot;#Leetcode-142：环形链表&quot; class=&quot;headerlink&quot; title=&quot;Leetcode.142：环形链表&quot;&gt;&lt;/a&gt;Leetcode.142：环形链表&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java单例模式</title>
    <link href="http://yoursite.com/2020/03/04/java-Singleton/"/>
    <id>http://yoursite.com/2020/03/04/java-Singleton/</id>
    <published>2020-03-04T14:11:12.000Z</published>
    <updated>2020-03-21T07:25:37.526Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式实际上很好理解，在一个Java程序中只有一个该Java对象，从头到尾这个对象只被实例化一次。这样就防止了对象被频繁的创建和销毁。</p><a id="more"></a><p>在实际应用中，Spring的对象实际上都是单例，所以很有可能出现线程不安全的操作，比如说在controller里使用属性变量，在并发的时候就可能出现线程不安全的操作。</p><p>为了实现单例模式，就必须将这个对象的构造方法私有化，否则其他的地方也可以获取这个对象就不再是单例模式了。</p><p>那如何获取到这个对象的实例呢，内部提供一个获取该对象的接口，通过这个接口来获取对象。</p><h3><span id="单例模式例子">单例模式例子</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span>&#123;</span><br><span class="line">    <span class="comment">//直接在类的加载阶段就实例化一个对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonTest instance = <span class="keyword">new</span> SingletonTest();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//私有化该对象的构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTest <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在其他函数中调用这个静态方法获取对象就可以了。</p><h2><span id="单例模式不同的实现方式">单例模式不同的实现方式</span></h2><p>单例模式有多种实现方式，拿出来一部分进行讲解。</p><h3><span id="懒汉式线程不安全实现">懒汉式线程不安全实现</span></h3><p>懒汉式线程不安全实现式最简单的实现方式之一，为什么叫懒汉式，因为在创建对象的时候并没有在创建的时候立刻将单例实例化，而是在第一次调用的时候才进行的实例化，所以在并发的时候就有可能出现线程不安全的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonTest instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//私有化该对象的构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTest <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance =  = <span class="keyword">new</span> SingletonTest();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="懒汉式线程安全实现">懒汉式线程安全实现</span></h3><p>只需要在原有的基础上将获取实例的方法进行同步化操作即可。但是效率太低，大部分的时候都不需要对方法进行同步。</p><p>优点是不会浪费空间，只有在第一次使用时才实例化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonTest instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//私有化该对象的构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonTest <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance =  = <span class="keyword">new</span> SingletonTest();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3><span id="饿汉式实现">饿汉式实现</span></h3><p>饿汉式的意思就是这个人非常着急，等不到第一次使用才实例化，在类加载时就要把单例加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span>&#123;</span><br><span class="line">    <span class="comment">//直接在类的加载阶段就实例化一个对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonTest instance = <span class="keyword">new</span> SingletonTest();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//私有化该对象的构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTest <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式实现，效率很高，不用加锁，但是容易产生垃圾对象。在多种情况下都有可能出现类的加载，浪费空间。</p><h3><span id="双重校验锁">双重校验锁</span></h3><p>双重校验锁是线程安全懒汉式实现的优化，大幅度提高性能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonTest instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//私有化该对象的构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonTest <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonTest<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonTest();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样一来，只有在并发的且实例未创建的时候才进入同步代码块，其他时候直接就可以获取到实例。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式实际上很好理解，在一个Java程序中只有一个该Java对象，从头到尾这个对象只被实例化一次。这样就防止了对象被频繁的创建和销毁。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
